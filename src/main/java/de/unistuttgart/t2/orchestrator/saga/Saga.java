package de.unistuttgart.t2.orchestrator.saga;

import de.unistuttgart.t2.common.saga.OrderCreatedReply;
import de.unistuttgart.t2.common.saga.SagaData;
import de.unistuttgart.t2.common.saga.commands.ActionCommand;
import de.unistuttgart.t2.common.saga.commands.CompensationCommand;
import de.unistuttgart.t2.common.saga.commands.SagaCommand;
import io.eventuate.tram.commands.common.Success;
import io.eventuate.tram.commands.consumer.CommandWithDestination;
import io.eventuate.tram.commands.consumer.CommandWithDestinationBuilder;
import io.eventuate.tram.sagas.orchestration.SagaDefinition;
import io.eventuate.tram.sagas.simpledsl.SimpleSaga;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Definition of the saga.
 * <p>
 * For each saga definition exists a {@link io.eventuate.tram.sagas.orchestration.SagaManager SagaManager}, that manages
 * the instances of the saga and executes the actions and compensations as defined in the saga.
 * <p>
 * This saga has three participants: inventory, payment and order.
 * <p>
 * Order for creating and rejecting and orders, payment for executing the payment (payment is the pivot step) and
 * inventory to manage the product's stockpiles.
 * 
 * @author maumau
 */
public class Saga implements SimpleSaga<SagaData> {

    private final Logger LOG = LoggerFactory.getLogger(Saga.class);

    @Override
    public SagaDefinition<SagaData> getSagaDefinition() {
        return this.sagaDefinition;
    }

    private SagaDefinition<SagaData> sagaDefinition = step().invokeParticipant(this::actionOrder)
        .onReply(OrderCreatedReply.class, this::onReplayOrder)
        .onReply(Success.class, (a, b) -> LOG.info("order replied")).withCompensation(this::compensationOrder)
        .step().withCompensation(this::compensationInventory).step().invokeParticipant(this::actionPayment)
        .onReply(Success.class, (a, b) -> LOG.info("payment replied")).step()
        .invokeParticipant(this::actionInventory).onReply(Success.class, (a, b) -> LOG.info("inventory replied"))
        .build();

    /*
     * actions and compensations
     */

    /**
     * Create a message that triggers an action and is to be send to the orders's queue.
     * 
     * @param data information to be passed to the saga participants
     * @return message to be sent to order
     */
    private CommandWithDestination actionOrder(SagaData data) {
        return CommandWithDestinationBuilder.send(new ActionCommand(data)).to(SagaCommand.order).build();
    }

    /**
     * Create a message that triggers compensation and is to be send to the order's queue.
     * 
     * @param data information to be passed to the saga participants
     * @return message to be sent to order
     */
    private CommandWithDestination compensationOrder(SagaData data) {
        return CommandWithDestinationBuilder.send(new CompensationCommand(data)).to(SagaCommand.order).build();
    }

    /**
     * Handle reply from order service. Set orderId to id generated by order service.
     * 
     * @param data  information to be passed to the saga participants
     * @param reply reply received from order saga participant
     */
    private void onReplayOrder(SagaData data, OrderCreatedReply reply) {
        data.setOrderId(reply.getId());
    }

    /**
     * Create a message that triggers an action and is to be send to the inventory's queue.
     * 
     * @param data information to be passed to the saga participants
     * @return message to be sent to inventory
     */
    private CommandWithDestination actionInventory(SagaData data) {
        return CommandWithDestinationBuilder.send(new ActionCommand(data)).to(SagaCommand.inventory).build();
    }

    /**
     * Create a message that triggers compensation and is to be send to the inventory's queue.
     * 
     * @param data information to be passed to the saga participant
     * @return message to be sent to inventory
     */
    private CommandWithDestination compensationInventory(SagaData data) {
        return CommandWithDestinationBuilder.send(new CompensationCommand(data)).to(SagaCommand.inventory).build();
    }

    /**
     * Create a message to be send to the payment's queue.
     * 
     * @param data information to be passed to the saga participants
     * @return message to be sent to payment
     */
    private CommandWithDestination actionPayment(SagaData data) {
        return CommandWithDestinationBuilder.send(new ActionCommand(data)).to(SagaCommand.payment).build();
    }
}
